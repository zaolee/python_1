파이썬 1
파이썬의 역사 (뜻 : 비단뱀, 거대한 구렁이)
심심해서 만듦 ㅋ

파이썬 문법
쉽다? 왜?????
타 언어보단 간결해!!! -> 굿??? 개좋은뎁쇼??

장점
다양한 분야에서 사용 
전세계적으로 이용자 수 많아
업데이트, 정보공유 등이 활발해
직접 만든지 않아도 라이브러리 통해서 효율적 => ㄹㅇ 내스탈

개발환경구성
구글에 파이썬 클릭하고
개인 컴터에 맞는거 설치
텍스트 파일 visual studio  code 설치하기
파일 - 폴더열기 해서 이제부터 작업물 저장할 폴더 설정
탐색기에 새파일 해서 파일 만드는데
파일명.py   => .py 는 무조건 설정 해줘야돼!!!

내가 쓴 내용 실행하는법
단축키 ㄱㄱ -> 설정하는법 ctrl + k , ctrl + s  누르고 검색창에 원하는거 써서 설정 ㄱ ㄱ 

터미널 창 깨끗하게 하는법
창에 cls 입력
단축키 : ctrl + l

주석 설정 -> #
# 어쩌구 저쩌구
단축키 : ctrl + / 이거 한번더 누르면 해제 

행 복사 
Alt + shift + ⬆️ ⬇️

잘라내기, 행삭제
Ctrl + x (커서 알빠)

커서 위치한 행을 아래로 이동
Alt + ⬆️ ⬇️

폰트 크기
설정 
Ctrl + ,
에서 font 치고 크기 조절하슈

파이썬2 - 변수

1. 변수할당 variable assignment
구조 : 변수의 이름 = 저장할 값
여기서 '=' 의 뜻은 같다가 절대 아님

2. 변수 삭제하고 싶을땐
del 변수이름

3. 한번에 변수 선언할땐?
,(콤마이용)
예) a , b = 100 , 200

4. 재할당 가능
기존 선언한 값이 있더라도 이후에 재선언 하면 그값이 최신꺼로 바뀜.

예1) a , b = 100 , 200
a = b  
: 즉 a 와 b 모두 200이 됨. a = b = 200 이런느낌?

예2) a , b = 100 , 200
a , b = b , a + b 
: a = 200 b = 300이 됨.
왜?? -> 연산자 우선순위때문임;;;;
즉 저기 a = b 보다 a + b가 먼저 실행되서 기존 a 값은 100임으로 300이 되는거... ㅁㅊ....

5. 수 말고도 문자열로 변수 고고
동일시 되는 문자 계속 치면 오류 + 수정 불편 등으로 변수 선언하고 문자 넣기!

6. 변수의 이름을 짓는 규칙 (식별자 생성 규칙)
변수 이름을 말하는 명칭 = 식별자

이것만은 꼭 지키삼~~!!
- 변수의 이름은 문자, 숫자, 밑줄(_) 포함 가능 ( !, @이런거 노노) 
- 변수의 이름은 숫자로 시작 안돼~~
- 공백 포함안돼!! (그래서 중간에  밑줄 넣기 = snake_case)
- 예약어(키워드) 사용 못해

* 변수는 명사형의 한단어로 사용 = 이름만 보고도 어디에 쓰이는지 알아야됨 = 가독성 좀 좋게 만들어!!

파이썬 3 - 데이터 타입 - 자료형
1.숫자 자료형 데이터 타입
- 정수를 표현하는 int형 (양수 음수 0)
모든 정수는 int

자료형 확인할때는 type 함수 이용 함수안에 변수 넣기
형식 : Print (type(변수))

그냥 print(변수) 이거는 값이 나오는거임

- 실수를 표현하는 float형 = 부동소수점 (소수점 이하를 가지는 수)
* 10의 몇n승 = en 붙이면 됨
예) 1.234567e5 = 123456.7

- complex 자료형
복소슈와 복소수 연산들이 필요할때 사용하는 자료형
일반 수학에서는 복소수 a + bi
파이썬에서의 복소수 a + bj

2.문자, 문자열 데이터 타입
- String으로 표현
- "" 또는 ''로 묶어서 사용하기 (자바는 ""랑 '' 달라)
- 만약 안에다 따음표 출력하고 싶을땐? 큰따옴표 작은따옴표 번갈아가면서 사용하기
#탈출문자
- 그냥 통일시켜서 하고싶을땐? - \"문자열\" 이렇게 사용
- 줄바꿈 개행문자 = \n
- 커서를 행의 가장 앞으로 = \r (앞의 내용 없어짐)
- 역슬래시 출력하고 싶을때 = \\ 두번 사용 (한개만 출력됨)
- 내 커서를 8번째 위치로 이동(tab기능)  = \t
- 따옴표 연속으로 앞뒤로 3개씩 쓰기 = 개행문자(모든단어가 행 바뀌어짐)

3. 문자열 연산
반복, 문자열끼리 합치기(+) 다 쌉가능

4. print 함수
sep = ' ' : 따옴표 사이에 있는 내용물로 공백대신 출력됨. 공백으로 놓으면 그만큼 공간 생김
end = ' ' : 따옴표 사이에 있는 내용물로 다음 내용 속성 출력
예1)
a = 10 b = 20
print ( a , b ) 는 10 20 으로 출력되는데
print ( a , b , sep = ' 더하기 10은') 하면 10 더하기 10은 20 이렇게 출력됨
예2)
print( a , b )
print()
print("이소연") 
하면
10 20

이소연 이렇게 출력 변수가 안에 없으면 빈공간으로 출력됨
만약
print( a , b , end = ' 나는 ' )
print("이소연") 
하면
10 20 나는 이소연
이렇게 출력됨

5. 내장함수와 메서드
print() : 내장함수 : 어떠한 기능을 가진 코드, 괄호안에 기능 입력
str.upper() : 메서드 . (점) : 참조 연산자 즉 .(점) 앞에 있는 데이터를 참조하겠다
함수 앞에 .(점) 이있다? 메서드
없다? 파이썬에 내장된 내장 함수

6. bool형 (참거짓)
True = 참 false = 거짓
논리연산을 이용해서 여러개의 명제를 하나로 조합하거나 명제를 부정
오직 결과값 = 참거짓 두개중 하나
False 인경우
- false
- 0에 해당하는 값
- 빈문자
- [] , (), {}
- Null

파이썬 4 - 연산자
1. 산술 연산자
- 기본 연산자 = + - * /
- 몫을 구하는 연산자 = //
- 나머지를 구하는 연산사 = %
- 제곱을 구하는 연산자 = **
* 정수형의 나눗셈 결과는 실수형으로 나온다!

2. 자료형을 다른 자료형으로 바꾸기
정수형 -> 실수형, 논리형, 문자열
예1)
print(int(123.92))
print(int(123.9385859482))
print(int(123.9))
-> 123 출력 걍 소수점 없어지고 정수 되버림
예2)
print(int(True)) -> 1
print(int(False)) -> 0
True = 1 , False = 0 이라 생각하슈
예3)
print(int("23453")) -> 23453
데이터 타입이 바뀜
* 문자열 바꿀때 정수 외 글(한글, 영어, 특수문자)들어가면 변환 안됨

실수형 -> 정수형, 논리형, 문자열
예1)
print(float(200)) -> 200.0
print(float(3)) -> 3.0
예2)
print(float(True)) -> 1.0
print(float(False)) -> 0.0
True = 1.0 , False = 0.0 이라 생각하슈
예3)
print(float("23.2959")) -> 23.2959
print(float("232")) -> 232.0

문자열 -> 모든자료형 saap가능
걍 모두다 문자열로 바뀜
데이터들이 형변환 된거 궁금하면 type 쓰삼

논리형 -> 모든자료형 saap가능
거짓 이외 경우에 다 참
print(bool(0)) 
print(bool(0.0)) 
print(bool("")) 
-> false로 출력
print(bool(1)) 
print(bool(1.0)) 
print(bool("str")) 
print(bool("123")) 
-> true로 출력

3. 비교연산자
값들의 크기 비교해서 true, false 로 출력
숫자, 문자, 논리 다 비교 가능
제어문 반복문에 굿
종류 : < >  <= >= == !=(같지않으면)

*프로그래밍에서 "같다" : ==

문자열에서는 대문자 > 소문자 !!
문자열안에 숫자가 있을땐 큰수 > 작은수 (실수 정수 다 돼) 

4. 복합대입연산자
산술연산자 + 대입연산자 = += -= /= **= *=
(+ z * / ...)
예)
today = 1230 today += 1
print(today) -> 1231
왜써? 당연히 코드 짧게 쓰려고 ㅋ -> 간단, 가독성, 효율성

5. 논리연산자
and : 양쪽의 값이 모두 참일 경우에만 T
* and 연산자 여러번 사용하는 경우 그중 거짓으로 판별되는 가장 처음 값으로 결과값 출력됨
예) 
print ( "a" and 1<2 and true and false) : false 출력됨
만약 여러 값이 다 참인 경우에는 참인 마지막 값이 출력됨

or : 하나의 값중에 T 가 있다면 T
* or연산자 여러번 사용하는 경우 그중 참으로 판별되는 값이 마지막에 있어도 그 값이 출력됨.
모든 결과가 거짓인 경우엔 마지막 값으로 출력!!

* and랑 or 연산자를 같이 쓰는 경우 우선순위로 출력.
and 연산이 or 연산보다 우선순위 높아
내 의지로 우선순위 정하고 싶으면 해당 비교부분에 ( ) 사용하기

not :
거짓을 참으로 참을 거짓으로 만들어줌
형식 : 일반 연산자 앞에 not 붙여주면 됨 ㅋ
예)
print(not (True or False)) : f
print(not (10 > 3 )) : f  즉 결과값 반대로 나오지롱

6. 연산자 우선순위 ( 내가 지정하고 싶으면 ( ) 이용하기)
**(제곱) +(양수) -(음수) -> * / %(나머지) //(몫) -> + - -> 비교연산자 >= > < <= -> 평등 == != -> 대입연산자 += -= *= 등..

파이썬 5
1. 문자열 인덱싱
문자열에서 지정한 인덱스에서 문자를 뽑아낸것
특정한 위치같은거 정하는거
인덱스는 무조건 0번부터 시작!!
공백도 포함해서 세버림
음수로도 표현 가능 맨뒤가 -1이야 ( -5 -4 -3 -2 -1 이런식..)
즉 제일 뒤부터 뽑아내는거임 -> 뒤에서부터 뽑아내고 싶을때
* 문자열 인덱싱 할땐 인덱스의 범위가 문자열의 인덱스를 넘어서는 안돼. 넘으면 에러남
하나씩 추출하는거
형식 : print(문자열[순서])

2. 문자열 슬라이싱 = 이거 많이 쓰니까 잘해야돼~~
범위를 지정해서 잘라주는 범위내에서 추출하는것
형식 : print(문자열[n : m)
* 마지막 m위치의 요소 포함 안됨.
전체 추출하고 싶으면??
끝 인덱스에 +1 해서 넣으셈
끝 인덱스 공란으로 두면 자동으로 가장 끝까지 출력ㄷㅁ

앞 인덱스 공란으로 두면 자동으로 가장 앞에 있는 문자까지 출력됨
둘다 공란으로 두면 전체 출력됨

음수인덱스인 경우에는  전체 출력하고 싶을때 뒤에 공란으로 두면 마지막 요소까지 출력됨
음수인덱스 출력시 반대로 적으면 빈화면으로 출력됨

인덴스 범위를 넘어서 출력하더라도 정상적으로 맨끝까지 출력됨.

- 스탭인덱스
형식 : print( 문자열 [ n : m : i ])
-> n번 부터 m까지 출력하는데 i만큼 끊어서 알려줘
약간 스킵??하는??
음수로 표현 가능 (로꾸꺼)
예1)
print("0123456789"[0 : 10 : 2])
-> 0 2 4 6 8 출력됨
예2)
print("0123456789"[ :  : -3])
: 제일 뒤에서부터 3개씩 끊어서 가져와!!
-> 9 6 3 0 출력됨 

3. 문자열 포매팅
문자의 출력형식 지정
- 퍼센트 싸인(%) - 권장 엑스
데이터 타입을 명확하게 알아야돼
%뒤에 데이터 타입 써줘 ex) %d %s..

- 포맷 함수 - 이거쓰셈
{} {} {}이용해서 마지막에 .fomat(요소, 요소, 요소)
{} 사이에 순서 지정해주면 요소들이 알아서 순서 맞춰 출력됨
중괄호 숫자랑 요소 수 맞춰주기
문자 - 왼쪽 정렬 
숫자 - 오른쪽 정렬
자릿수 지정도 가능 {:수} 하면돼 그럼 글자수 제외하고 공백들어감
데이터 타입도 지정 가능 {순서 : 데이터타입}
문자 - s
숫자 - d
o - 8진수
x - 16진수

정렬
> : left
^ : middle
< : right
이거 쓸때 공백 있으면 정렬기호 앞에 채울 문자 지정해도 돼

지정해줄 자릿수 뒤에 .(온점)찍고 숫자 넣으면 그 수 만큼 문자열에서 문자가 잘려서 출력됨...

- f-string
속도 빠름
파이썬 3.6 버전 이상 가능
출력할 문자열 앞에 f(대소문자 노상관) 넣기만 하면됨
계산식 결과값도 출력 가능

파이썬 6
1. 문자열 메서드
사용할 수 있는 메서드??
: 특정 문자 찾기, 대문자 <-> 소문자, 문자 길이 재기 등...

- 내장 함수 : print() : 괄호 안에 인자를 넣어서 사용
- 메서드 : .upper() : .(참조연산자)를 이용해서 특정한 데이터를 참조해서 사용

내장 함수
len(length) : 요소값의 개수

메서드 ( .찍고 보면 사용할 수있는 메서드들 나옴)
capitalize : 문자열에서 가장 첫번째 글자를 대문자로 변경 해주는 메서드
upper : 문자열 전체를 대문자로 변경
lower : 문자열 전체를 소문자로 변경

이제부터 메서드는 뒤에 () 넣어주고 괄호 안에 찾고자 하는 글자 넣어줘야 돼
count : 문자열에 특정 글자가 몇번 발생하는지. 찾는 문자열 개수를 반환
find : 문자열에 특정 글자의 위치가 어딘지. 찾는 문자의 인덱스를 반환
* 만약 중복되있는 글자라서 뒤에 있는 글자 위치를 찾고 싶을땐 ()안에 , 찍고 첫번째 글자 이후의 위치 찍어줘...
index : 문자열에 특정 글자의 위치가 어딘지. 찾는 문자의 인덱스를 반환
* find 메서드와 index 메서드의 차이는? : 존재라지 않는 글자 값을 입력했을때 find 메서드는 -1로 출력 하지만 index 메서드는 에러남.
* find 메서드와 index 메서드 앞에 r을 넣게 되면? : 반대 방향으로 세줌 (역방향을 시작으로 세준다,,,)
replace : 기존 변하게 하려는 글자 넣고 ,찍고 뒤에 대체할 글자 넣어주면 변경됨. 문자열 치환
split : 구분자 표시. () 안에 넣으려는 인자값에 따라서 문자열을 분리해줌..
strip : 좌우 공백을 없애주는.. 기존 좌우에 있던 공백들이 싹다 사라짐. 근데 문자열 4242에 있는 공백은 적용되지 않아.
 
파이썬 7 -List
1. List : 여러가지 데이터를 동시에 활용하기 위해 활용.. 들어가는 값에 순서를 적용...
- list는 대괄호[] 사용하고 안에 구분할때는 , 사용하기
- 출력하면 list 형식으로 출력되지롱
- 숫자 말고도 문자형 논리형 그냥 모든 자료로 출력가능
- 각각 다른 자료형을 넣어도 출력됨.
- 인덱싱과 슬라이싱도 가능.. 츨력 역시 list형으로 출력됨.

* n번째 요소중 m번째 글자수를 뽑아내고 싶을땐? 변수[n][m]이렇게 두번쓰셈.. 슬라이싱도 가능.
* 안에 있는 내용 변경하고 싶을때 인덱싱 활용해서 수정하기.(슬라이싱도 마찬가지)
* 안의 내용을 수정하면 양이 늘어날수도, 줄어들수도 있음.
* list안에서의 len함수는 내장함수이기 때문에 list안의 요소들의 개수를 출력해줘

2. List 메서드 - 추가
append() : 리스트 맨 뒤에 제일 마지막 인덱스에(-1) 새로운 요소 추가해주는 기능
* list에 직접적으로 추가하지 않더라도 추가가 되지롱 
* list가 아닌 요소를 추가하고 싶을때 이거 사용하면 안돼.
extend() : 요소를 추가해주는 기능
* append 와 extend 의 차이 : append는 약간 그 자체? 가 추가되는 반면, extend는 하나하나 분리되서 추가되는??느낌. 이 둘의 실행결과는 달라
예) 똑같이 asdf를 추가해서 넣었을때 append는 asdf이거 자체로 출력되면 extend는 a,s,d,f, 이렇게 출력됨.
insert(index, data) : 인덱스와 데이터를 동시에! n번째에 m을 추가하고 싶어!! 할때 사용. 원하는 위치에 데이터 추가 기능.

3. List 메서드 - 삭제
pop() : 반환, 꺼낸다?? 마지막 값을 꺼내줘, 반환해주고 그담 list요소 확인하면 없어져 있어..
remove() : 해당 요소를 삭제 ()안에 요소를 지정해주면 삭제됨.
del() : 인덱스 명시 해주면 그 위치에 있는 요소가 삭제됨.

4. List 메서드 - 정렬 (숫자, 알바벳, 한글..)
sort() : 작은 숫자부터 큰숫자로, 오름차순으로 정렬해줘.
reverse() : list안의 요소를 반대로(역순서대로) 출력해줌. 
* sort() 함수를 적용하고 reverse 함수를 사용하면 내림차순인것처럼 보임.
 sort(reverse) : 큰 수부터 작은 수로, 내림차순으로 정렬해줘.

5. 아스키코드(ASKII)
파이썬에서의 문자열 => 유니코드..변환..
ord() : 각각에 문자(캐릭터)에 매칭되는 10진수 값이 출력됨.
chr() : ord()의 반대.. 10진수 값을 넣으면 문자값으로 반환되는교,,

6. In 연산자 - Not In 연산자
- list 내부의 요소들 중에서 특정값이 있는지 확인하는 연산자.

in 연산자 : 내가 찾는 요소값이 있으면 T, 없다면 F, ~~가 있나용?? 
형식 : (찾고자 하는 요소 in 변수명)

not in 연산자 : in 연산자 반대. ~~가 없나용??

7. 다차원 List
이차원 list: list 안에 list가 들어가 있는거
만약에 list 안에 있는 list의 요소중에 특정 요소만 꺼내고 싶으면??
= 변수[행][열] 이렇게 표시, 행열 생각하면 편함.. 데이터는 차레대로 쌓이는거. 행이 쌓이고 그안의 요소를 찾을땐 열을 찾으면 돼. => 개신기..
이거 인덱스, 슬라이싱 다 적용가능.
* 왜 거꾸로 셀때는 0이 아닌 -1부터 시작될까? -> 0번은 0 ~ 1 42의 값? 즉 음수 인덱스는 -1 ~ 0 42의 값 출력 하나는 뜻.
-> 이게 인덱스랑 슬라이싱에 적용되는거임. 약간 인덱스는 ~번째 느낌이면 슬라이싱은 ~ 사이는?? 이런 느낌...

파이썬 8 - tuple
1. tuple
- list와 비슷하지만 추가, 삭제, 수정 불가능. 인덱스 속도는 더 빨라.
- tuple은 소괄호()를 사용.
- tuple 안의 요소가 1개라면 마지막에 ,를 꼭 넣어줘야돼!! 안하면 단순히 데이터의 자료형으로 출력됨.
- 덧셈으로 연결, 곱셈으로 표현 할 수있어.
- append, insert, extend 이런건 사용 못해.
- 다차원 tuple생성 가능.
- 괄호 생략 가능

2. 언팩킹
안에 들어가 있는 요소들을 각각 여러가지 변수에 대입한는 것.(한줄에 기록가능)
요소의 개수와 변수의 개수와 다르면 안돼.. 
-> 남은 요소를 담아줄 변수 필요, 아니면 남는 요소를 마지막 요소에 list로 묶어서 출력가능. 
형식: 변수1, 변수2,*변수3 변수3에 싸그리 list화 됨.

3. dictionary 
문자열, tuple,list = sequence 자료형 -> 인덱스 사용해서 활용
*sequence = 연속적인, 순서, 시간대로
- 키 와 값이 쌍을 이루는 구조
형식 : dictionary {"~~~~~(키)" : "!!!!!!(값)," "@@@@@" : "######"}
- 중괄호{}를 사용해
- 인덱스를 사용하지 않고 바로 키값을 입력해서 적용함. 그럼 키의 값이 출력되지롱
- 키 값 : 문자, 숫자, 논리 모두 가능 
* 중복없이 유일한 값만을 사용. 
* dictionary나 list는 키값으로 사용 못함. tuple은 사용가능
* 반대로 값은 중복 가능. 값을 여러개 쓰고 싶을때 [ ]리스트 이용해서 쓰기.
** 키 값이 논리형일 경우 0과 false, 1과 true는 같은값으로 취급함.
- 기존의 있는 키를 사용해서 값을 새로 정의하면 기존 값이 변경돼
- 새로운 값을 추가할때는 기존에 존재하지 않은 키를 기반으로 값을 입력하면 돼.


4. dictionary 메서드
* ()안에 키값 입력해줘야됨.
get() : 해당 특정 값 출력
values() : 딕셔너리의 모든 벨류값이 출력
keys() : 딕셔너리의 모든 키값이 출력 
items() : 키와 값 쌍을 tuple로 반환 됨.
in 연산자, not in 연산자 사용가능.
pop이나 del 사용해서 삭제 가능!!

5. 집합
형식 : 변수 : { "요소1", "요소2", ... ... "요소5"}
순서가 정해져 있지 않음.
중복 안돼. -> 한번만 출력됨.

요소를 추가하고 싶을땐 add()라는 메서드 사용 (이것도 중복은 안돼) (형식 : 변수.add(요소1))
* 숫자형, 문자형, 참과 거짓, tuple() 자료형 ssap가능
* list[], dictionary{keys:value} 형태는 불가능.
* 요소 안에 0이나 1이 있으면 true나 false 못써. 같이 사용못해.(동급 취급)

update() : tuple, list, dictionary 안의 요소들만 추가해주는 메서드
* dictionary 같은 경우에는 keys값만 추가됨 

set() : tule, list와 같은 sequence 자료형을 집합으로 변환하고 싶을때 사용..
* 이 역시 중복 안되고, 순서 안정해져있음.
* list는 순서 정해져있어. 이거 차이.

6. 집합의 연산
합집합 : 두집합의 모든 원소를 합한 집합. 형식 : (변수1 | 변수2) 중복 안돼
교집합 : 두집합이 공통으로 가지고 있는 원소. 형식 : (변수1 & 변수2)
차집합 : 한 집합에서 다른 집합에 있는 원소를 뺀 집합. 형식 :  (변수1 - 변수2)

remove() : 삭제. 지우고 싶은 원소를 ()안에 입력해주면 돼
* 0이나 1은 T나 F로 대체 가능

제 9강 - 제어문
1. input 함수
- 사용자에게 어떠한 값을 받을 수 있는 함수
- print함수랑 사용법 같아
- 형식 : 변수 = input()
- 문자열이기 때문에 숫자로 출력하고 싶을땐 정수형,실수형으로 자료형 변환 해줘야돼!!(입력 받을때부터 해주는거 추천)

2. if문
- 여러가지 조건을 줘서 실행하거나 or 실행하지 않거나.
- 형식 : if 조건식(참 또는 거짓) : *(공백 4칸주기) print();
* 파이썬2인경우엔 tab키 써줘야됨
- 공백은 맞춰서 써줘

3. else문

- 형태 : if 조건식 : (공백 4칸주기) 조건식이 참일 때 실행할 문장
            else : (공백 4칸주기) 조건식이 거짓일 때 실행할 문장
- else에는 조건식이 붙지 않는다.
- if 조건식과 동일하게 앞에 공백 4칸 기억하기!!

제 10강 - 반복문(1)
1. while문
- 형식 while 조건식 : (공백 4칸) 조건식이 참일동안 실행할 문장
- if문과의 차이점은?? : 실행횟수!! 
*if문은 조건식이 참이면 한번만 실행됨. 
*while문은 조건식이 참일 경우 조건식이 만족하는동안 계속해서 실행됨. 

4. range함수 
- 형식 range(n,m) -> 시작점인 n번 요소부터 마지막 지점인 m전!!까지 실행됨.
- 앞의 요소 생략가능 ( 마지막요소는 포함 안돼!)
- 음수로도 표현 가능해~~
- step기능 사용가능 예) numbers = list(range(-10, 0, 2)) -10부터 -1까지 2만큼 건너뛰어서 출력
- 수식 사용가능 range(n,m+1)
- 결과값 정수형으로 입력해주기!! 에러날수도 잇어. -> //(몫)을 나누는 형태로 하거나 형변환 해주기( int형)

제 11강 - 반복문(2)
1. for문
- 형식 for (임시)변수 in 나열가능한 자료(문자열, list, range, dictiory) : (공백 4칸) 실행할 문장
- dictiory 같은 경우에는 keys 나 vaules 값만 따로 출력 가능
- enumerate() 함수 : 인덱스 번호와  list안의 요소를 각각 하나씩 출력됨. 하나씩 출력시킬때 유용함.


2. 중첩 for문 (feat: 다차원 list)
예) 구구단
for i in range(2,9+1) : -> 첫번째 for문
    for j in range(1,9+1): -> 이중으로
         print("{} * {} = {}".format(i,j,i*j)) -> 1번 방법
         print(f"{i} X {j} = {i*j}", end = "\t") -> 2번방법
-삼중 for문 : for문 안에 for문 안에 for문

제 12강 - 반복문(3)
1. break & continue문
- 반복문 내부에서만 사용가능
- break : 반복문을 중단 : ~번째 일때 중단해줘@!!!! 이런 느낌.. 그뒤로 반복 안하고 종료,,
* else랑은 다름. else는 실행이 끝나면 끝이면, break는 중간에 해지해버령
- continue : 반복문을 생략 : break는 아에 실행을 멈춰버리는데 continue는 조건에 해당되지 않으면, 실행이 멈추긴 하지만  반복이 종료되는게 아닌 다시 돌아가서 실행됨.


2. 중첩 for문 안 break문
- 중첩 for문 같은 경우 자신이 속한 그룹만 해당돼!! 자기랑 제일 가까운 반복문을 탈출하는거임!!

menu = {"아이스 아메리카노" : 3000, "아메리카노" : 2500, "아이스 라떼" : 4000, "라떼" : 3500, "아이스크림" : 8000}

# 차가운 메뉴, 따듯한 메뉴로 구분해서 출력하기.
# for문 활용해야돼 continue문?
ice_menu = {} # dictionary 생성
hot_menu = {}
for i, j in menu.items() :
    if i[0:3] == "아이스":
       ice_menu[i] = j
    else :
       hot_menu[i] = j   
print(ice_menu)
for i, j in ice_menu.items():
    print("제품명 : {}, 가격 : {}".format(i,j))

print(hot_menu)
for i, j in hot_menu.items():
    print("제품명 : {}, 가격 : {}".format(i,j))    

제 13강 - 함수
- 데이터를 사용하기 위해 이름을 붙이는거 : 변수
- 특정 동작을 하기 위해 코드에 이름 붙이는거 : 함수

1. 파이썬의 내장함수
 - print() : 문자열로 출력
- input() : 입력한 데이터를 문자열로 변환

2. 함수 정의하기
- def 함수이름(): (공백4칸) 수행할 코드 

- 정의해준 함수를 가지고 불러서 그 함수 사용하는거 : 함수호출 * ()쓰는거 잊지마!!
- 하나의 함수에는 한가지 기능만 넣는걸 추천!!
- ()안에는 사욜할 데이터를 넣어서도 사용해!! -> 매개변수(파라미터)
- 예) def add(num1, num2, num3) :
               print(num1 + num2 + num3)
     add( 1 , 2 , 3 ) -> 6이 출력됨.
여기서 num1, num2, num3 -> 매개변수 (개수 노상관) 숫자, 문자열 다 사용가능
         1, 2, 3 -> 인자
         ass -> 함수이름 
* 함수 호출시 인자의 개수와 매개변수의 개수 맞추기!!(나중에 다른법 하는거 배움)
* 함수 정의시 무조건 간단하게 코멘트 달아놯야돼!!(가독성)  형식 : ''' (독스트링??) ''' 
* 독스트링 사용시 커서 올려놯도 설명란 뜸

- return : 함수가 만든 데이터를 함수를 호출한 지점에 되돌려 주는거 = 반환한다.
- none : 값이 없다.(반환값이 없는 함수다)


제 14강 -지역변수(local variable) & 전역변수(global variable)
1. 지역변수(local variable) & 전역변수(global variable)
- 참조 : 데이터에 접근 하려고 했어!!
- 지역 -> 전역 순으로 찾음.
- 만약에 지역변수 안에서 전역변수 호출하고 싶을땐 global 변수 선언하면 돼~

- 함수 정의 시, 함수내부에서는 반드시 이 함수에 필요한 데이터만 활용하는 지역변수를 선언하기~~
- 프로그램 전체에서 활용할 데이터를 할당할때만 전역변수 활용하기!!

2. 기본매개변수
- 매개변수에 기본값을 넣어줄수 있음.
- 일반 매개변수보다 앞에 올수는 없음.
- 원하는 데이터만 지정 가능.
- 기본매개변수로 (지역)변수를 넣어줬을때, 함수가 정의되는 시점에서 평가를 하게때문에 그 이후의 값이 바뀐다하더라도 결과값은 변함없이 출력됨.

3. 가변매개변수
- 가변이란? : 여러개의 인자값을 원하는 만큼 넣는거.
- 형태 : def 함수이름(*인자) :   즉 인자값앞에 * 넣어주기. 보통 인자값으로 args(인자)를 사용함.
- 일반매개변수 앞으로는 못 와!!
-return으로 반환해버리면 tuple형태로 반환해줘

4. 키워드매개변수
- 키워드 = 특정값 (형태로 인자값을 전달하게되면) {"키워드" : "특정값"} (형태로 함수내부로 전달됨) like dictionary~
- 형태 : def 함수이름(**인자) :  즉 인자값앞에 ** 넣어주기. 보통 인자값으로 kwargs를 사용함.
- 나열해야될때 함수식에다 인사.items 사용하기
- 난이도 있음.. 
- end 속성이 키워드 매개변수임..

매개변수 순서 - 일반매개변수, 가변매개변수, 기본매개변수, 키워드매개변수 순으로 쓰기


* 파이썬에서 return값
코딩을 배우면서 공통적으로 배우는게 많은데,,
그중 이해가 잘 안되던 return 값..
return 자체에 이해가 안되는게 아닌,, 이걸 왜쓰지?에 대해 의문이 들어서 좀 더 알아봤다.
(지난번에도 f-string이 막상 코드에 활용된거 보는데 왜쓰는지 궁금해서 따로 더 공부함 ㅋㅋ)
코딩 배우면서 느낀건 길이 한가지 길이 아니라 겁나 많아서;; 공부할게 많은거 같음..ㅋㅋ
여튼 사족이 너무 길었기에 바로 본론으로!!

일단 이 파이썬에서의 return값은 보통 2가지 기능을 한다고 한다.

1번 : 값을 돌려주는 역할  2번 : 함수를 더이상 실행하지 않는 역할!!
우선 1번의 뜻을 보면, 보통 우리가 함수를 생성하고 선언할때 
1.그 함수 자체를 선언하는방법이 있고 
2. print()함수 안에 우리가 만든 함수를 넣어서 출력시키잖슴??

말뜻이 헷갈릴수도 있는데, 차근차근 gabojago~!!

def a(x):
    return(x+1)

이런 함수를 만들었을때와

def a(x):
    print(x+1)

이 두가지 방법이 있다고 생각해봅시다.

이제 출력을 할꺼임. 
a(1)라 하면 출력값이 전자는 2, 후자도 2라고 나오잖슴!?!

이건 무리가 안돼.. 근데 내가 a함수를 2개 사용해서 그 값을 더하고 싶음 어떡해???

즉 a(1) + a(2)가 하고싶은거;;;

여기서 차이가 나는데 return은 다시 돌아가는 기능이니까 a(1) 적용한뒤, a(2)를 적용하고 그리고 다시 돌아가서 그 둘을 더함.
근데 print는 단순히 출력을 하는 기능임. 그래서 안됨

이 부분이 큰 차2가 있음!!! 지금은 단순한 식이지만, 코드가 복잡해질수록 return이 빛을 발휘할꺼같은,,, 내 개인적인 생각...

그리고 이제 2번 함수를 더이상 실행하지 않는 역할이란??

이 뜻은 우리가 이제

def a(x):
    return(x+1)
    print("안뇽")
이런 코드를 짰을때 식대로 한번 해석 abojago~~!!
a(1)을 넣었음 -> x에 1이 대입 그럼 1 + 1 = 2 값이 나오고 print("안뇽")으로 내려가는게 아닌 return(되돌아가!!)로 적용되서
"안뇽"은 출력이 안됨;;;;
  

여튼 이런이유로 return을 쓴다.

java에서도 void랑 return이랑 헷갈렸는데 이거 공부하면서 조금 이해됨.. 물론 똑같진않겟지만,,
여튼 난 이렇게 이해했다,, 굿??!!!!



제 15강 - 클래스
1. 클래스란?
- 변수 + 함수를 모두 가지고있는거.. ... 속성을 가지고 있어!!!
- 형태 : class 클래스이름(잘지어 ㅈㅂ) :
- 객체를 만들기 위해 사용
- 객체 만다는법 : 객체이름(변수) = 클래스이름() 여기서 "클래스이름()" : 생성자 
- 클래스를 이용해서 만든 객체 = 인스턴스(instance)
- 인스턴스(instance = 객체)는 클래스의 모든 속성을 가지고 있음.
- 객체의 속성을 알아보기 위해서는,,, 형식 : 객체(인스턴스).(속성 나옴) 여기서 "." = 참조연산자 (ex) .fomat())
- 참조 : 접근한다,,,,

- 이렇게 만들어진 객체(인스턴스)는 고유의 속성을 가지기도 함. -> 이 역시 출력 가능
- 근데 같은 클래스이고 인스턴스1, 인스턴스2가 있으면 인스턴스1과 2가 가지는 고유속성은 서로 전달 안됨.

- 클래스는 속성 이외로 함수도 가질수 있지롱 -> 메서드!!! 이역시 객체에 참조연산자 사용가능!!

* 파이썬에서는 클래스를 이용한 인스턴스에 매서드를 호출할때, 암묵적으로 (우리 눈엔 안보이지만) 클래스 안에 있는 매서드 (매개변수) 안에 인스턴스가 인자로 들어가게돼!!!
-> 그래서 (매개변수)안에 self 넣어주기!! // self 아니어도 됨 권고사항!

- 참조연산자를 사용하게 되면 뒤에 있는 변수(또는 매서드)가 인스턴스(객체)를 참조하겠다는 의미
- 클래스 - 인스턴스 : 빵 틀 - 빵 ㅇㅋ??

2. 객체(instance)
- 파이썬에서는 모든게 객체다.. 뭔뜻일까?
- 내장함수 앞을 보면 앞에 class가 붙어있음.
- 모든 내장함수는 class인건가?? -> type함수 써서보면 앞에 class라 적혀있음
- 우리가 여태껏 활용해 왔던 내장함수들은 class였음..
- 예) 1이란 데이터 int는 인스턴스(객체)다...  
- 여태껏 썻던 내장함수들에 내가 넣어준 값들은 형변환이라기 보단 내장함수(정확히는 클래스)에 새로운 인스턴스를 생성하는거..

*파이썬 공식함수 에서 내장함수 문서 들어가 (공홈에서 documentation에서 python 3.x docs 클릭) 
 언어 한국어로 설정뒤 라이브러리 레퍼런스 클릭. 내려가서 내장함수 클릭 -> 목록 출력됨 (시간 남아돌때 ㅎㅎ읽어보기..)


제 16강 - 네임스페이스, 생성자
1. 네임스페이스
- 클래스의 변수가 저장되는 이름공간  != 객체(인스턴스)의 변수가 저장되는 이름공간
- 즉 이름이 같더라도 다 따로따로 지정되는거!! -> 다른 이름 공간에는 영향을 끼치지 않아
- 제일 가까운곳에서 찾고 점차 광범위 해짐
- 객체마다 다른 이름공간이 있기 때문에 변수를 각각 따로 정의 하면 다른 값이 나와

* dir() 함수 : 이름공간에 있는 모든 속성을 리스트로 반환

2. 생성자 매서드
- 형식 : __init__(self(객체), 매개변수, 매개변수 ) : self.매개변수 = ~~~
- 생성자 매서드 -> 클래스 내부에 정의를 해주게 되면 객체를 생성할때, 생성자 매서드가 호출하게 됨.
- 생성자 매서드 : 생성과 동시에 만들고 싶을때 사용.
- 매개변수와 인자의 수는 동일해야 됨.
- 한번에 속성 설정하고 싶을때 클래스에 사용하면 짱 편함

3. 소멸자 매서드
- 생성자 매서드 반대 개념 : 객체가 소멸될 때 호출되는거
- 형식 : __del__(self) : ~~~~
- 프로그램 실행이 종료되면 동시에 이 객체들도 사라지기 때문에 소멸자 매서드가 자동으로 출력됨 
- 참조하고 있는 어떤 객체 변수들이 더이상 참조하고 있지않을때 실행 돼 (레퍼런스카운터 = 0 이 될때 실행)

* 변수는 객체를 가르키고 있는 이름 (동일시하면 절대 안돼!!)

4. __str__(self) : return "~~{}~~{}~~".format(~~.~~, ~~.~~)
- 출력형식을 지정해주는 매서드, 내가 원하는 내용으로 표현 가능해.
- 문자열(정보) 반환값을 지정할 때 사용.

* __ <- 이런 매서드 특 : 특정한 경우에만 실행되는거

5. 상속
- 클래스가 클래스를 상속 받는거
- 재사용 가능.
- 상위 클래스 : super, 부모. 하위클래스 : sub, 자식
- 형식 : class 하위클래스(상위클래스): 그럼 하위클래스가 상위클래스 속성 싹다 가져가 개꿀.
- 하위클래스 이름으로 객체 생성시 그대로 상위클래스 속성 가져감 -> 상위 클래스 속성에 필요한 인자값 넣어줘야돼!!
- 상위클래스 속서에 문자열 매서드가 있다면 그것도 재정의한거라 print()함수 써서 출력해주기

- 상위클래스의 속성을 하위클래스에 재정의 하면 그 결과값으로 출력됨. -> 재정의(오버라이드)
- 하위클래스에 새로운 속성을 추가하게 되면 상위클래스와는 관련없음.(하위클래스 고유 속성)(재정의 아님)

- 매서드 역시 재정의 가능해!!(추가같은거..)
- 상위 클래스를 하위클래스에 참조(호출) 하는거 = super().~~~

* issubclass(A,B) -> A클라스가 B클라스의 하위클라스인가용??

  
제 17강 - 모듈
1. 모듈 : 작은 부품들을 모아 큰 것을 만드는거?
- 코드를 작성해놓은 파일
- 모듈화 해놓으면 이후에 유지 보수도 가능하고 다른곳에 활용도 가능!

2. 만들어놓은 모듈을 다른곳에 쓰는 방법
- 새로운 파일 안에다  형식 : input 모듈명 작성
- 모듈명.(모듈에 써놓은 함수 사용) 끝.
- 따로 만들지 않아도 사용할수 있음.

3. 일일히 모듈명 적기 귀찮을때?
- input 모듈명 as 별명작성 해서 별명으로 사용하면 됨.

4. 해당 모듈에 쓰고싶은 기능만 가져오고 싶을때
- from 모듈명 import (모듈에 써놓은 쓰고싶은 함수 사용) as 별명
- 쓰고싶은 함수는 ,찍고 여러가지 활용가능.
- as는 안써도 돼
- 기능 쓸때 모듈명 안쓰고 바로 모듈에 써놓은 함수명 적으면 됨.

* 내장함수 안에 내장된 모듈들 사용가능!!

* datetime 모듈안에 timedelta -> 날짜, 시간, 분 등.. 계산해주는거(20일 후는? 30일 전은?)

5. 파이썬 장점 : 방대한 라이브러리 (남들이 만들어 놓은것도 사용가능. -> pypi.org)
- 사용방법 : 터미널창에 pip install Django==2.0(받고싶은 라이브러리)
- 삭제방법 : 터미널창에 pip uninstall  Django==2.0(삭제할 라이브러리) -> y 입력

제 18강 - 예외처리방법 
1. 구문오류 : 문법적으로 코드 잘못작성 (SyntaxError)
- EOL : end of line : 행의 마지막
- 친적하게 텍스트 에디터가 알려줌 ㅋ
- 뭔뜻인지 모를때 검색 고고
- 구문오류 생성시, 프로그램 자체가 실행되지 않아 

2. 들여쓰기 오류 (IndentationError)
- 들여쓰기오류 생성시, 프로그램 자체가 실행되지 않아 
- 탭 에러(TabError) : 탭 4번 기억하기!!

3. 예외처리
- 프로그램이 실행되는 동안 발생하는 오류
- 치명적이진 않지만, 예외 발생할 부분에 미리 방지 가능
- 발생하고 나서 처리하는 것이 아닌, 발생 전 처리하는거

* {}안에 수식 사용할때 -> f-string으로 작성하기

- 형식 : try: (공백 4칸) 예외가 발생할 가능성이 있는 코드
        except: (공백 4칸) 예외가 발생했을 때 실행할 코드
- except 발생할 오류 입력 :  (공백 4칸) 예외가 발생했을 때 실행할 코드 
- -> 각 오류마나 나오는 메세지 다르게 입력 가능, 여러개 입력 가능

- 보통은 하나하나 다쓰기 힘드니까 '(Base)except Exception : (공백 4칸) 예외가 발생했을 때 실행할 코드' 입력함.

- Exception 뒤에 as 넣고 변수 입력하면 어떠한 오류가 발생했는지 알수 있어. (밑에 print(변수) 써주기)

- finally 구문 : 어떠한 상황이든지 출력하고 싶을때 (위에 return 이 있으면 보통은 출력안돼)
* 근데 중간에 오류가 나더라도 출력이 됨.

- else 구문 : return값이 위에 있으면 출력 안돼

- 예외처리를 할때는 신중해야됨.

4. 사용자가 직접예외를 발생시키는 방법
- raise 발생시킬예외(예외내용 작성)

제 19강 - 웹 크롤링
1. 웹 크롤링
- 웹서비스의 정보를 가져와서 그중 우리가 필요한 정보만을 추출하는것
- 웹 스크랩핑이랑 같은 의미
- 크롤링을 하는 프로그램 = 크롤러 : 예전에 자바를 이용했지만, 파이썬이 더 간단해

- 사전 지식 필수 ( HTML의 구조, 태그, 웹페이지 동작 방식 등...)

- HTML, CSS
- 구조 , 꾸미는 역할 

* html창에 doc + tab키

- 태그에는 속성과 값을 삽입 가능
- 태그의 기능을 확장시키기 위해 사용 (ex:src, div[의미 없어,, 웹 구조 분할 하려고],li,td,tr,ul등,,)

- div태그안에는 class라는 속성을 사용, class는 div 별명?개념?? 유일한 값을 주고싶을땐 id.
- 요소 안에 요소 있는거 = 부모태그 <-> 자식태그 관계

2. requests & Beautiful Soup

- f12번 : 인터넷창 검사

- 태크 한쌍 = elements

- request를 사용하기 위해선 설치하기 ( 터미널 -> pip imstall requests 엔터)
- import requests 선언하고 사용
- print(requests.get("웹서버주소")) -> 200출력되면 성공!
- 웹서버 복사해서 붙여넣는걸 추천(오타주의)

- print(requests.get("웹서버주소")) -> 이거 변수 선언해서 print(이거 변수.text) 입력
- 우리가 알아볼수 있는 구조로 출력되지만, 파이썬 형태로 파씽? 해줄꺼야 -> Beautiful Soup 라이브러리 이용
- Beautiful Soup -> 터미널에 설치하기 pip install Beautiful Soup4 여기서 enldp 4입력 필수
- from bs4 import BeautifulSoup 치면 사용 가능.
- 파싱하는법 변수1 = BeautifulSoup(이거 변수.contents, "html.parser")
- 특정태그 = 변수1.select("특정태그") 해서 print하면 저 요소들만 출력됨.
- select("특정태그") : 인자로 입력한 요소를 전부다 선택 -> 리스트 형으로 출력됨 
* text, name같은 특정요소를 뽑고싶을때는 인덱스 지정해줘야 뽑아낼수 있음
- select_one("특정태그") : 인자로 입력한 요소중 가장 첫번째 요소를 선택
- 부모요소 안에있는 자식요소 선택하고 싶을때 '>' 사용 예) "a > b" : a 부모태그안에 b 자식태그 선택할랭.


- 찾는 정보들에는 어떠한 규칙이 있느니, 그 규칙을 찾는게 중요함
- 다양한 크롤링을 보는것도 좋음


파이썬에서 소수점 출력하기

문제푸는데.. 반올림을 하는 round()함수말고도 소수점을 지정해주는 방법을 찾아왔다..
역시나 방법은 여러개가 있는데, 함 가보자고~~!!!

일단 round()함수는 round(변수(또는,값), 반올림해서 표현하고 싶은 n번째 수) 구조인데,
여기서 n이 1을 기준으로 이야기 해보겠음.
n = 1 이면 소수 둘째자리에서 반올림을 해서 첫째자리까지 나온다는 의미.
n = 2 이면 소수 셋째자리에서 반올림을 해서 둘째자리까지 나온다는 의미.

이렇게 1, 2, 3, 4,.... 를 넣으면 됨.
만약에 소수가 아닌 1의 자리, 10의 자리같은 경우에는?
n의 값에 아무것도 안넣어주면 그냥 1의 자리에서 반올림이 되는것.
그리고 n = -1이면 10의 자리에서 반올림. n = -2이면 100의 자리에서 반올림....이런식으로 이해하면 된다.

여기서 문제가 하나 생김. 
예) a = 0.000000232 인데 내가 round(a, 1) 이렇게 넣어버리면 이뜻은 둘째자리에서 반올림하자는 뜻이지만, 출력은 첫째자리가 나오지 않음;;;
이런 문제들을 방지하기 위해 아에 우리가 지정을 해주는 방법을 찾아봤는데,,

총 3가지 방법을 알아냈다.

1. f스트링 방법.
f스트링은 식도 ㄹㅇ 간단하고 가독성 좋아가지고,,,프로그램 언어중에서 파이썬 같은 존재다...ㅎㅎ(내 개인적인 기준..)

여튼 형태는 f"{변수(또는 값):소수점자리수}"로 입력하기!! 
여기서 소수점자리수 입력할때 0.~~인데 0생략해서 .~~로만 입력해도 ㄱㅊㄱㅊㅊ

예) print(f"{1.234:.2f"} -> 1.23 

2. format 방법
기본적은 format형식은 "ㅁㅁㅁ{값1}ㅋㅋㅋ{값2}".format(값1, 값2) 이 형식인데 저 {}안에다 소수점 몇 개 출력할지 알려주면 되는교,,

즉, "ㅂㅂㅂ{:.Nf}ㄷㄷㄷ".format(실수) -> 여기서 N의 의미는 N번째 자리까지만 출력하겠다는 의미
 
예) print("12.345를 반올림하게 되면 {:.2f}이다.".format(12.345)) -> 12.345를 반올림하게 되면 12.35이다. 로 출력됨.

역시나 {}가 두개이상이면 ()안에 , 로 해서 넣어주면 된다!


3. 기본 소수점 출력 자릿수 지정 %.Nf 형식
- 여기서 N의 의미는 N번째 자릿수까지 반올림한 값 출력(N번째 자리까지만 출력하겠다는 의미)

이거 사용할때 print("%.Nf"%변수(또는 값))입력해야됨. %잊지말기..

 %.Nf 형식에서 f는 실수를 의미함. d로 입력하면 정수라는 의미임 3-1, 3-2에 활용가능,,,

3-1. 공백 채움 소수점 출력 자릿수 지정 %M.Nf 형식
- 즉 전체 M칸 공간중에 남은 앞칸에 공백을 채워 소수점 N자리까지만 출력하겠다.
3-2. 0채움 소수점 출력 자릿수 지정 %0M.Nf 형식
- 즉 전체 M칸 공간중에 남은 앞칸에 0을채워 소수점 N자리까지만 출력하겠다.

































